
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'jsANDAND COMMA DIVIDE ELSE EQUAL EQUALEQUAL FALSE FUNCTION GE GT IDENTIFIER IF LBRACE LE LPAREN LT MINUS NOT NUMBER OROR PLUS RBRACE RETURN RPAREN SEMICOLON STRING TIMES TRUE VARjs : element jsjs : element : FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmtelement : stmt SEMICOLONoptparams : paramsoptparams : params : IDENTIFIER COMMA paramsparams : IDENTIFIERcompoundstmt : LBRACE statements RBRACEstatements : stmt SEMICOLON statementsstatements : stmt : IF exp compoundstmtstmt : IF exp compoundstmt ELSE compoundstmtstmt : IDENTIFIER EQUAL expstmt : RETURN expstmt : VAR IDENTIFIER EQUAL expstmt : expexp : IDENTIFIER'
    
_lr_action_items = {'FUNCTION':([0,4,12,32,36,],[1,1,-4,-9,-3,]),'LBRACE':([14,17,29,31,],[-18,21,21,21,]),'RETURN':([0,4,12,21,32,33,36,],[7,7,-4,7,-9,7,-3,]),'RBRACE':([21,27,33,37,],[-11,32,-11,-10,]),'SEMICOLON':([2,5,8,14,15,20,22,26,28,32,34,],[-17,12,-18,-18,-15,-14,-12,-16,33,-9,-13,]),'EQUAL':([8,13,],[16,19,]),'ELSE':([22,32,],[29,-9,]),'COMMA':([24,],[30,]),'LPAREN':([10,],[18,]),'VAR':([0,4,12,21,32,33,36,],[6,6,-4,6,-9,6,-3,]),'RPAREN':([18,23,24,25,35,],[-6,-5,-8,31,-7,]),'IDENTIFIER':([0,1,4,6,7,9,12,16,18,19,21,30,32,33,36,],[8,10,8,13,14,14,-4,14,24,14,8,24,-9,8,-3,]),'$end':([0,3,4,11,12,32,36,],[-2,0,-2,-1,-4,-9,-3,]),'IF':([0,4,12,21,32,33,36,],[9,9,-4,9,-9,9,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([21,33,],[27,37,]),'stmt':([0,4,21,33,],[5,5,28,28,]),'element':([0,4,],[4,4,]),'params':([18,30,],[23,35,]),'exp':([0,4,7,9,16,19,21,33,],[2,2,15,17,20,26,2,2,]),'js':([0,4,],[3,11,]),'optparams':([18,],[25,]),'compoundstmt':([17,29,31,],[22,34,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> js","S'",1,None,None,None),
  ('js -> element js','js',2,'p_js','js_parser.py',28),
  ('js -> <empty>','js',0,'p_js_empty','js_parser.py',32),
  ('element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',6,'p_element_func','js_parser.py',37),
  ('element -> stmt SEMICOLON','element',2,'p_element_stmt','js_parser.py',42),
  ('optparams -> params','optparams',1,'p_optparams','js_parser.py',46),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','js_parser.py',50),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','js_parser.py',54),
  ('params -> IDENTIFIER','params',1,'p_params_last','js_parser.py',58),
  ('compoundstmt -> LBRACE statements RBRACE','compoundstmt',3,'p_compoundstmt','js_parser.py',62),
  ('statements -> stmt SEMICOLON statements','statements',3,'p_statements','js_parser.py',66),
  ('statements -> <empty>','statements',0,'p_statements_empty','js_parser.py',70),
  ('stmt -> IF exp compoundstmt','stmt',3,'p_stmt_ifthen','js_parser.py',75),
  ('stmt -> IF exp compoundstmt ELSE compoundstmt','stmt',5,'p_stmt_ifthenelse','js_parser.py',80),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assign','js_parser.py',85),
  ('stmt -> RETURN exp','stmt',2,'p_stmt_return','js_parser.py',90),
  ('stmt -> VAR IDENTIFIER EQUAL exp','stmt',4,'p_stmt_declare','js_parser.py',95),
  ('stmt -> exp','stmt',1,'p_stmt_exp','js_parser.py',100),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','js_parser.py',104),
]
